{
  "swagger": "2.0",
  "info": {
    "title": "Club de Préstamos",
    "description": "Club de Préstamos API allows you to interact directly the merchandising system",
    "version": "1.0.0"
  },
  "host": "localhost:3000",
  "produces": [
    "application/json"
  ],
  "basePath": "/",
  "securityDefinitions": {
    "jwt": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "authenticates a user a returns an access token",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "email and password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful authentication",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "description": "authorization token for subsequent calls"
                }
              }
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auth/restorepassword": {
      "patch": {
        "tags": [
          "Auth"
        ],
        "summary": "sent email to restore a user password",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "restore password data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RestorePassword"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "successful authentication",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "description": "authorization token for subsequent calls"
                }
              }
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auth/restorepassword/{key}": {
      "get": {
        "summary": "get the password information by key.",
        "description": "get the password information by key",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "the password key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "the password information with the given key",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/states": {
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "State"
        ],
        "summary": "get state list",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "description": "Filter. e.g. prop1:value,prop2:value ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "fields",
            "description": "Fields returned. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sortby",
            "description": "Sorted-by fields. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "order",
            "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of resources by page. Default value is 20. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of result set. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Number of results set. Must be an integer",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "state list",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/State"
                  },
                  "maxItems": 20
                },
                "meta": {
                  "$ref": "#/definitions/PaginationMeta"
                }
              }
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "User"
        ],
        "summary": "get user list",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "description": "Filter. e.g. prop1:value,prop2:value ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "fields",
            "description": "Fields returned. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sortby",
            "description": "Sorted-by fields. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "order",
            "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of resources by page. Default value is 20. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of result set. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Number of results set. Must be an integer",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "user list",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  },
                  "maxItems": 20
                },
                "meta": {
                  "$ref": "#/definitions/PaginationMeta"
                }
              }
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "creates a user",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "user data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "user created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "patch": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "update a user",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the user id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "user data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "the updated user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "get a user by id.",
        "description": "get a user by id",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the user id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "the user with the given id",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/investors": {
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "Investor"
        ],
        "summary": "get investor list",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "description": "Filter. e.g. prop1:value,prop2:value ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "fields",
            "description": "Fields returned. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sortby",
            "description": "Sorted-by fields. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "order",
            "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of resources by page. Default value is 20. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of result set. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Number of results set. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "userId",
            "description": "User id. Must be an integer",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "investor list",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Investor"
                  },
                  "maxItems": 20
                },
                "meta": {
                  "$ref": "#/definitions/PaginationMeta"
                }
              }
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Investor"
        ],
        "summary": "creates a investor",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "investor data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Investor"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "client created",
            "schema": {
              "$ref": "#/definitions/Investor"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/investors/{id}": {
      "patch": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "update a investor",
        "tags": [
          "Investor"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the investor id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "investor data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Investor"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "the updated client",
            "schema": {
              "$ref": "#/definitions/Investor"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "get a investor by id.",
        "description": "get a investor by id",
        "tags": [
          "Investor"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the investor id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "the investor with the given id",
            "schema": {
              "$ref": "#/definitions/Investor"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/getProvinces": {
      "get": {
        "summary": "get provinces",
        "description": "get provinces",
        "tags": [
          "Provinces"
        ],
        "responses": {
          "200": {
            "description": "the provinces list",
            "schema": {
              "$ref": "#/definitions/Province"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/getCantons/{province}": {
      "get": {
        "summary": "get cantons.",
        "description": "get cantons by province",
        "tags": [
          "Cantons"
        ],
        "parameters": [
          {
            "name": "province",
            "in": "path",
            "description": "the province",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "the cantons list by province",
            "schema": {
              "$ref": "#/definitions/Canton"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/getDistricts/{province}/{canton}": {
      "get": {
        "summary": "get districts.",
        "description": "get districts by province and canton",
        "tags": [
          "Districts"
        ],
        "parameters": [
          {
            "name": "province",
            "in": "path",
            "description": "the province",
            "required": true,
            "type": "string"
          },
          {
            "name": "canton",
            "in": "path",
            "description": "the canton",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "the districts list by province and canton",
            "schema": {
              "$ref": "#/definitions/District"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/getZipcode/{province}/{canton}/{district}": {
      "get": {
        "summary": "get zip code.",
        "description": "get zip code by province and canton and district",
        "tags": [
          "ZipCodes"
        ],
        "parameters": [
          {
            "name": "province",
            "in": "path",
            "description": "the province",
            "required": true,
            "type": "string"
          },
          {
            "name": "canton",
            "in": "path",
            "description": "the canton",
            "required": true,
            "type": "string"
          },
          {
            "name": "district",
            "in": "path",
            "description": "the district",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "the zip codes list by province and canton and district",
            "schema": {
              "$ref": "#/definitions/ZipCode"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/getmyinvests/{id}": {
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "get my invests",
        "tags": [
          "GetMyInvests"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the investor id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "the list of my invests",
            "schema": {
              "$ref": "#/definitions/Loan"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/getinvestorbyloan/{id}": {
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "get my investors by loan",
        "tags": [
          "GetMyInvestorByLoan"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the loan id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "the list of my investors",
            "schema": {
              "$ref": "#/definitions/InvestorByLoan"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/assigninvestorloan": {
      "post": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "update a loan investor",
        "tags": [
          "LoanInvestorAssign"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loan investor data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoanInvestor"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "the updated loan investor relation",
            "schema": {
              "$ref": "#/definitions/LoanInvestor"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/checkloanpercentage/{id}": {
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "get percentage by loan id.",
        "description": "get percentage by loan id",
        "tags": [
          "CheckLoanPercentage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the loan id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "the percentage with the given loan id",
            "schema": {
              "$ref": "#/definitions/CheckLoanPercentage"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/clients": {
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "Client"
        ],
        "summary": "get client list",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "description": "Filter. e.g. prop1:value,prop2:value ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "fields",
            "description": "Fields returned. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sortby",
            "description": "Sorted-by fields. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "order",
            "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of resources by page. Default value is 20. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of result set. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Number of results set. Must be an integer",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "client list",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  },
                  "maxItems": 20
                },
                "meta": {
                  "$ref": "#/definitions/PaginationMeta"
                }
              }
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "creates a client",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "client data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Client"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "client created",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/clients/{id}": {
      "patch": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "update a client",
        "tags": [
          "Client"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the client id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "client data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Client"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "the updated client",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "get a client by id.",
        "description": "get a client by id",
        "tags": [
          "Client"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the client id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "the client with the given id",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/roles": {
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "Role"
        ],
        "summary": "get roles list",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "description": "Filter. e.g. prop1:value,prop2:value ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "fields",
            "description": "Fields returned. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sortby",
            "description": "Sorted-by fields. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "order",
            "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of resources by page. Default value is 20. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of result set. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Number of results set. Must be an integer",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "roles list",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Role"
                  },
                  "maxItems": 20
                },
                "meta": {
                  "$ref": "#/definitions/PaginationMeta"
                }
              }
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "Role"
        ],
        "summary": "creates a role",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "role data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "role created",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/roles/{id}": {
      "patch": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "update a role",
        "tags": [
          "Role"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the role id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "role data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "the updated role",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "get a role by id.",
        "description": "get a role by id",
        "tags": [
          "Role"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the role id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "the role with the given id",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loans": {
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "Loan"
        ],
        "summary": "get loans list",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "description": "Filter. e.g. prop1:value,prop2:value ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "fields",
            "description": "Fields returned. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sortby",
            "description": "Sorted-by fields. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "order",
            "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of resources by page. Default value is 20. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of result set. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Number of results set. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "state",
            "description": "State id. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "userId",
            "description": "User id. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "loanIds",
            "description": "User id. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "investorId",
            "description": "Investor id. Must be an integer",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "loans list",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Loan"
                  },
                  "maxItems": 20
                },
                "meta": {
                  "$ref": "#/definitions/PaginationMeta"
                }
              }
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Loan"
        ],
        "summary": "creates a loan",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "loan data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Loan"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "loan created",
            "schema": {
              "$ref": "#/definitions/Loan"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loans/{id}": {
      "patch": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "update a loan",
        "tags": [
          "Loan"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the loan id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "loan data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Loan"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "the updated loan",
            "schema": {
              "$ref": "#/definitions/Loan"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "get a loan by id.",
        "description": "get a loan by id",
        "tags": [
          "Loan"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the loan id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "the loan with the given id",
            "schema": {
              "$ref": "#/definitions/Loan"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/getloansbyinvestor": {
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "GetLoansByInvestor"
        ],
        "summary": "get all loans list",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "description": "Filter. e.g. prop1:value,prop2:value ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "fields",
            "description": "Fields returned. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sortby",
            "description": "Sorted-by fields. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "order",
            "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of resources by page. Default value is 20. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of result set. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Number of results set. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "state",
            "description": "State id. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "userId",
            "description": "User id. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "loanIds",
            "description": "User id. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "investorId",
            "description": "Investor id. Must be an integer",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "loans list",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LoanByInvestor"
                  },
                  "maxItems": 20
                },
                "meta": {
                  "$ref": "#/definitions/PaginationMeta"
                }
              }
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/getloansbyinvestor/{id}": {
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "GetLoansByInvestor"
        ],
        "summary": "get loans by investor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the loan id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "loans by investor",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LoanByInvestor"
                  },
                  "maxItems": 20
                },
                "meta": {
                  "$ref": "#/definitions/PaginationMeta"
                }
              }
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "GetLoansByInvestor"
        ],
        "summary": "update loans by investor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the loan investor id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Loans by investor",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoanByInvestor"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "the updated loan by investor",
            "schema": {
              "$ref": "#/definitions/LoanByInvestor"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/getloansbyclient/{id}": {
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "GetLoansByClient"
        ],
        "summary": "get loans by client",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the client id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "loans by client",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LoanByClient"
                  },
                  "maxItems": 20
                },
                "meta": {
                  "$ref": "#/definitions/PaginationMeta"
                }
              }
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/getuserallinformation/{id}": {
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "GetUserAllInformation"
        ],
        "summary": "get user all information",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the user id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "all information",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GetUserAllInformation"
                  },
                  "maxItems": 20
                },
                "meta": {
                  "$ref": "#/definitions/PaginationMeta"
                }
              }
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/documents": {
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "Document"
        ],
        "summary": "get documents list",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "description": "Filter. e.g. prop1:value,prop2:value ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "fields",
            "description": "Fields returned. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sortby",
            "description": "Sorted-by fields. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "order",
            "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of resources by page. Default value is 20. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of result set. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Number of results set. Must be an integer",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "documents list",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Document"
                  },
                  "maxItems": 20
                },
                "meta": {
                  "$ref": "#/definitions/PaginationMeta"
                }
              }
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/documents/{id}": {
      "patch": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "update a document",
        "tags": [
          "Document"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the document id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "document data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Document"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "the updated user",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "get a document by id.",
        "description": "get a document by id",
        "tags": [
          "Document"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the document id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "the document with the given id",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/documents/user/{id}": {
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "get a documents by id user.",
        "description": "get a documents by id user",
        "tags": [
          "Document"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the user id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "the document with the given id",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/documentTypes": {
      "get": {
        "security": [
          {
            "jwt": []
          }
        ],
        "tags": [
          "DocumentTypes"
        ],
        "summary": "get document types list",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "description": "Filter. e.g. prop1:value,prop2:value ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "fields",
            "description": "Fields returned. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sortby",
            "description": "Sorted-by fields. e.g. prop1,prop2 ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "order",
            "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of resources by page. Default value is 20. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of result set. Must be an integer",
            "type": "string"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Number of results set. Must be an integer",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "document type list",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentTypes"
                  },
                  "maxItems": 20
                },
                "meta": {
                  "$ref": "#/definitions/PaginationMeta"
                }
              }
            }
          },
          "default": {
            "description": "server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "State": {
      "title": "State",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "InvestorByLoan": {
      "title": "User",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "identification": {
          "type": "string"
        },
        "nationality": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "referencePhone": {
          "type": "string"
        },
        "cellphone": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "province": {
          "type": "string"
        },
        "canton": {
          "type": "string"
        },
        "district": {
          "type": "string"
        },
        "zipCode": {
          "type": "integer",
          "format": "int64"
        },
        "relativePhone": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "roleId": {
          "type": "integer",
          "format": "int64"
        },
        "isActive": {
          "type": "boolean"
        },
        "signupDate": {
          "type": "string"
        },
        "bank": {
          "type": "string"
        },
        "clientAccount": {
          "type": "integer",
          "format": "int64"
        },
        "iban": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "User": {
      "title": "User",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "avatar": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "identification": {
          "type": "string"
        },
        "nationality": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "referencePhone": {
          "type": "string"
        },
        "cellphone": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "province": {
          "type": "string"
        },
        "canton": {
          "type": "string"
        },
        "district": {
          "type": "string"
        },
        "zipCode": {
          "type": "integer",
          "format": "int64"
        },
        "relativePhone": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "roleId": {
          "type": "integer",
          "format": "int64"
        },
        "isActive": {
          "type": "boolean"
        },
        "signupDate": {
          "type": "string"
        },
        "bank": {
          "type": "string"
        },
        "clientAccount": {
          "type": "integer",
          "format": "int64"
        },
        "iban": {
          "type": "integer",
          "format": "int64"
        },
        "paymentId": {
          "type": "string"
        },
        "sex": {
          "type": "string"
        },
        "maritalStatus": {
          "type": "string"
        },
        "home": {
          "type": "string"
        },
        "otherProperties": {
          "type": "boolean"
        },
        "jobSector": {
          "type": "string"
        },
        "jobCategory": {
          "type": "string"
        },
        "academicLevel": {
          "type": "string"
        },
        "hasVehicle": {
          "type": "boolean"
        },
        "jobTime": {
          "type": "string"
        }
      }
    },
    "Investor": {
      "title": "Investor",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "loanId": {
          "type": "integer",
          "format": "int64"
        },
        "percentage": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdate": {
          "type": "string"
        }
      }
    },
    "LoanInvestor": {
      "title": "LoanInvestor",
      "type": "object",
      "properties": {
        "investorId": {
          "type": "integer",
          "format": "int64"
        },
        "loanId": {
          "type": "integer",
          "format": "int64"
        },
        "percentage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CheckLoanPercentage": {
      "title": "CheckLoanPercentage",
      "type": "object",
      "properties": {
        "percentage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Client": {
      "title": "Client",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "loanId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Role": {
      "title": "Role",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Loan": {
      "title": "Loan",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "loanId": {
          "type": "integer",
          "format": "int64"
        },
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "term": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "bank": {
          "type": "string"
        },
        "clientAccount": {
          "type": "integer",
          "format": "int64"
        },
        "iban": {
          "type": "integer",
          "format": "int64"
        },
        "stateId": {
          "type": "integer",
          "format": "int64"
        },
        "requestLoanDate": {
          "type": "string"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdate": {
          "type": "string"
        },
        "interest": {
          "type": "integer",
          "format": "int64"
        },
        "score": {
          "type": "integer",
          "format": "int64"
        },
        "approvedDate": {
          "type": "string"
        }
      }
    },
    "LoanByInvestor": {
      "title": "LoanByInvestor",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "loanId": {
          "type": "integer",
          "format": "int64"
        },
        "investorId": {
          "type": "integer",
          "format": "int64"
        },
        "percentage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "LoanByInvestorBody": {
      "title": "LoanByInvestorBody",
      "type": "object",
      "properties": {
        "loanIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "LoanByClient": {
      "title": "LoanByClient",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "interest": {
          "type": "integer",
          "format": "int64"
        },
        "score": {
          "type": "integer",
          "format": "int64"
        },
        "term": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "stateId": {
          "type": "integer",
          "format": "int64"
        },
        "requestLoanDate": {
          "type": "string"
        },
        "approvedDate": {
          "type": "string"
        }
      }
    },
    "LoanByClientBody": {
      "title": "LoanByClientBody",
      "type": "object",
      "properties": {
        "loanIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "investors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GetUserAllInformation": {
      "title": "GetUserAllInformation",
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        },
        "facebook": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "signupDate": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "avatar": {
          "type": "string"
        },
        "identification": {
          "type": "integer",
          "format": "int64"
        },
        "loanIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "nationality": {
          "type": "string"
        },
        "cellphone": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "province": {
          "type": "string"
        },
        "canton": {
          "type": "string"
        },
        "district": {
          "type": "string"
        },
        "zipCode": {
          "type": "integer",
          "format": "int64"
        },
        "referencePhone": {
          "type": "string"
        },
        "relativePhone": {
          "type": "string"
        },
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "term": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "bank": {
          "type": "string"
        },
        "clientAccount": {
          "type": "integer",
          "format": "int64"
        },
        "iban": {
          "type": "integer",
          "format": "int64"
        },
        "stateId": {
          "type": "integer",
          "format": "int64"
        },
        "requestLoanDate": {
          "type": "string"
        },
        "interest": {
          "type": "integer",
          "format": "int64"
        },
        "investors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "score": {
          "type": "integer",
          "format": "int64"
        },
        "approvedDate": {
          "type": "string"
        }
      }
    },
    "Document": {
      "title": "Document",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "usersId": {
          "type": "integer",
          "format": "int64"
        },
        "identificationCopy": {
          "type": "string"
        },
        "incomeDocument": {
          "type": "string"
        },
        "sugefDocument": {
          "type": "string"
        },
        "passportCopy": {
          "type": "string"
        }
      }
    },
    "DocumentTypes": {
      "title": "Document",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "typeId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "statusCode": {
          "type": "string",
          "description": "The http statues code."
        },
        "code": {
          "type": "string",
          "description": "The error code that refers the error type."
        },
        "message": {
          "type": "string",
          "description": "The error message."
        }
      }
    },
    "LoginParams": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "account profile email address"
        },
        "password": {
          "type": "string",
          "description": "account password"
        }
      }
    },
    "Province": {
      "type": "object",
      "properties": {
        "provinceList": {
          "type": "object",
          "description": "province list name"
        }
      }
    },
    "Canton": {
      "type": "object",
      "properties": {
        "cantonList": {
          "type": "object",
          "description": "canton list name"
        }
      }
    },
    "District": {
      "type": "object",
      "properties": {
        "districtList": {
          "type": "object",
          "description": "district list name"
        }
      }
    },
    "ZipCode": {
      "type": "object",
      "properties": {
        "zipCode": {
          "type": "integer",
          "format": "int64",
          "description": "zip code number"
        }
      }
    },
    "RestorePassword": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "account profile email address"
        },
        "password": {
          "type": "string",
          "description": "account password"
        },
        "userId": {
          "type": "integer",
          "format": "int64",
          "description": "account user id"
        }
      }
    },
    "PaginationMeta": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "description": "The number of rows returned. Default name is count. Enabled by default.",
          "default": 20
        },
        "totalCount": {
          "type": "integer",
          "description": "The total numbers of rows available. Default name is totalCount. Enabled by default.",
          "default": 100
        },
        "pageCount": {
          "type": "integer",
          "description": "The total number of pages available. Default name is pageCount, enabled by default.",
          "default": 5
        },
        "self": {
          "type": "string",
          "description": "The link to the requested page. Default name is self, enabled by default.",
          "default": "http://resource.url?page=2"
        },
        "previous": {
          "type": "string",
          "description": "The link to the previous page. Default name is previous, enabled by default. null if no previous page is available.",
          "default": "http://resource.url?page=1"
        },
        "next": {
          "type": "string",
          "description": "Same than previous but with next page.",
          "default": "http://resource.url?page=3"
        },
        "first": {
          "type": "string",
          "description": "Same than previous but with first page.",
          "default": "http://resource.url?page=1"
        },
        "last": {
          "type": "string",
          "description": "Same than previous but with last page.",
          "default": "http://resource.url?page=5"
        },
        "page": {
          "type": "integer",
          "description": "The page number requested. Default name is page, disabled by default.",
          "default": 2
        },
        "limit": {
          "type": "integer",
          "description": "The limit requested. Default name is limit, disabled by default.",
          "default": 20
        },
        "offset": {
          "type": "integer",
          "description": "The offset requested. Default name is offset, disabled by default.",
          "default": 0
        }
      }
    }
  }
}
